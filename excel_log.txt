국회gg_project/
├── scripts/
│   ├── test_speech_parser.py     회의록별 발언 수 파싱 및 db저장 테스트
│   ├── check_speech_data.py      회의록별 발언 수 출력 테스트
│   ├── fetch_data.py             수동파싱 하기
│   ├── reset_speech_data.py      의정발언 값 모두 0으로 리셋하기
│   ├── calculate_scores.py       의정발언 값 넣기
│   └── check_keyword_data.py     저장된 키워드 확인




# 전체 구조 만들기전 수동으로 파싱해서 DB에 넣고,
# 의정발언(speech_score)에 total 값 넣어주기
***************************************************
##### 회의록별 발언수 및 의정발언 값 #####

수동 파싱
python scripts/fetch_data.py

의정발언 값 - speech_score 리셋 (그냥 리셋하고 다시 넣을때 잘 들어가는지 확인하려고 만든거거)
python scripts/reset_speech_data.py


python scripts/test_speech_parser.py

모든 의원 데이터가 db에 잘 들어갔는지 확인
python scripts/check_speech_data.py

수동 의정발언(회의록별 발언수 total 값을 speech_score에 넣기)
python scripts/calculate_scores.py


수동 파싱 밑 의정발언 순서 (** 서버 실행됐을때 이 두개를 호출하는 방식- 물론 안에 있는 함수겠지만만)
python scripts/fetch_data.py
python scripts/calculate_scores.py

##### 키워드 #####

1. `python scripts/fetch_data.py` - 의원 정보 수집 및 키워드 데이터 수집
2. `python scripts/check_keyword_data.py` - 저장된 키워드 확인



1. **`app/utils/excel_parser.py`** - `parse_speech_keywords_excel()` 함수 추가
   - 키워드 엑셀 파일을 파싱하는 기능

2. **`app/services/data_processing.py`** - `process_keyword_data()` 함수 추가
   - 파싱된 키워드 데이터를 DB에 저장하는 기능
   - 중복 데이터 처리 로직 포함

3. **`scripts/fetch_data.py`** - `fetch_excel_data()` 함수 수정
   - 키워드 데이터 수집 추가

***************************************************

speech_by_meeting 데이터의 파싱 및 DB 저장 로직의 현재 상태를 분석해보겠습니다.

## 현재 구현 상태

제공된 코드를 보면 speech_by_meeting 데이터를 처리하는 로직은 다음과 같이 구성되어 있습니다:

1. **파싱 기능 (`app/utils/excel_parser.py`)**: 
   - `parse_speech_by_meeting_excel()` 함수가 구현되어 있으며, 엑셀 파일에서 회의별 발언 데이터를 읽어 파싱하는 기능을 수행합니다.
   - 이 함수는 "대수 회의구분별 통계" 시트를 읽고, 의원별 발언 횟수를 추출합니다.

2. **데이터 처리 기능 (`app/services/data_processing.py`)**: 
   - `process_speech_data()` 함수가 구현되어 있으며, 파싱된 데이터를 DB에 저장하는 역할을 합니다.
   - 발언 데이터를 처리하여 SpeechByMeeting 모델에 저장합니다.

3. **데이터 수집 스크립트 (`scripts/fetch_data.py`)**: 
   - `fetch_excel_data()` 함수에서 엑셀 파일을 찾아 파싱하고 DB에 저장하는 과정을 조율합니다.
   - 'data/excel/speech/speech_by_meeting' 폴더의 모든 '_speech_by_meeting.xlsx' 파일을 찾아 처리합니다.

4. **테스트 스크립트 (`scripts/test_speech_parser.py` 및 `scripts/check_speech_data.py`)**:
   - 파서 테스트와 저장된 데이터 확인을 위한 스크립트가 구현되어 있습니다.

## 완료 여부 분석

코드 분석 결과, speech_by_meeting 데이터를 파싱하고 DB에 저장하는 기본 로직은 구현되어 있는 것으로 보입니다. 특히:

1. 파일을 읽고 파싱하는 로직 (`parse_speech_by_meeting_excel`)이 완성되어 있습니다.
2. 파싱된 데이터를 DB에 저장하는 로직 (`process_speech_data`)이 완성되어 있습니다.
3. 여러 파일을 일괄 처리하는 로직 (`fetch_excel_data`)이 구현되어 있습니다.
4. 테스트를 위한 스크립트도 갖추어져 있습니다.

다만, 데이터를 기반으로 speech_score를 계산하는 로직(`calculate_speech_scores` in `scripts/calculate_scores.py`)은 매우 단순하게 Total 값을 그대로 speech_score로 사용하고 있습니다.

## 결론

네, speech_by_meeting 관련 데이터를 파싱하고 DB에 저장하는 기본적인 로직은 완성된 것으로 보입니다. 기존 코드는 다음 과정을 수행할 수 있습니다:

1. 지정된 폴더에서 speech_by_meeting 엑셀 파일들을 찾습니다.
2. 각 파일을 파싱하여 의원별, 회의 구분별 발언 횟수 데이터를 추출합니다.
3. 추출된 데이터를 DB의 SpeechByMeeting 테이블에 저장합니다.
4. Total 발언 수를 기반으로 의원의 speech_score를 설정합니다.

실제 시스템에서 이 로직이 정상적으로 작동하려면 파일이 지정된 형식(시트 구조, 열 이름 등)을 따라야 하며, 의원 정보가 먼저 DB에 저장되어 있어야 합니다. 이 조건들이 충족된다면, 코드는 예상대로 작동할 것입니다.










이 변경사항은 다음과 같은 기능을 합니다:

process_attendance_data 함수:

데이터를 본회의와 상임위로 분리하여 처리
본회의 데이터는 그대로 저장
상임위 데이터는 의원별, 상태별로 합산하여 저장
상세 로그 추가


fetch_excel_data 함수:

임시 파일 필터링 로직 추가
상세 로그 추가
파일 처리 중 오류 처리 개선